#!/usr/bin/perl

use strict;

my $keyDir           = "keys";
my $keyType          = "secp256k1";
my $opensslPath      = "/usr/local/openssl-ecdsa/bin";
my $cnfFile          = "router-key.cnf";

# files to use:
my $ecParamFile      = "$keyDir/router-key-params.$$.pem";
my $privateKeyFile   = "$keyDir/router-key.$$.private";
my $csrFile          = "$keyDir/router-key.$$.csr";
my $publicCertFile   = "$keyDir/router-key.$$.cert";
my $validityPeriod   = "365"; #days

if ($opensslPath) {
    $ENV{'PATH'} = $opensslPath . ":" . $ENV{'PATH'};
}

if (! -d $keyDir) {
    mkdir($keyDir) || die "failed to make the directory: $keyDir";
}

# generate the EC parameters, setting the keytype up
system("openssl ecparam -name $keyType -genkey -out $privateKeyFile");

# generate the certificate signing request
system("openssl req -new -batch -config $cnfFile -key $privateKeyFile -out $csrFile");

# read in the SKI so we can set the distingiuished name using it
my $ski;
open(I, "openssl req -in $csrFile -text|");
while(<I>) {
    if (/X509v3 Subject Key Identifier/) {
	$ski = <I>;
	$ski =~ s/\s//g;
	$ski =~s/://g;
	last;
    }
}
close(I);
print "ski: $ski\n";

# regenerate the certificate signing request with the correct subject
system("openssl req -new -batch -subj /CN=$ski -config $cnfFile -key $privateKeyFile -out $csrFile");


# self-sign the certificate
# XXX: or CA-sign it
my $serial = `date +%Y%m%d0001`;
chomp($serial);
system("openssl x509 -sha256 -extfile $cnfFile -extensions bgpsec_router_ext -set_serial $serial -in $csrFile  -out $publicCertFile -req -signkey $privateKeyFile -days $validityPeriod");
