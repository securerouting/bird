
  1. BGPSEC patch
  2. Installation Instructions:
  3. BIRD run time configuration
  4. License(s)


1. BGPSEC patch

This is a patch that adds BGPSEC capability to the BIRD BGP
implementation.

This patch is not well tested and only tested on Linux machines. It is
in an Alpha release and ***should not be considered for production
systems***.  The basic BGPSEC protocol is supported with a several
notable exceptions: IPv6 support, more than one signature block (for
algorithm rollover), and bugs we have not seen yet.

For information on BGPSEC see the Internet Engineering Task Force
(IETF) Secure Inter-Domain Routing (SIDR) working group page and
specifically the draft describing the BGPSEC protocol:

https://datatracker.ietf.org/wg/sidr/
https://datatracker.ietf.org/doc/draft-ietf-sidr-bgpsec-protocol/

This patch is for v1.3.9 of the BIRD software.  The patch will likely
have some conflicts on different versions.  Information about BIRD
including download instructions can be found at:

http://bird.network.cz/


2. Installation Instructions:

General Instructions 

Building BGPSEC enabled bird

This describes building bird with BGPSEC support turned on, which
requires a few steps.  Contents

    2.1 Dependencies
        2.1.1 Use A Complete OpenSSL version
    2.2 Building Bird
        2.2.1 Configuring and Compiling
    2.3 Testing
    2.4 Using It
    2.5 Coding For It


2.1 Dependencies

On Fedora, you'll want flex, bison, and readline-devel packages.
Use A Complete OpenSSL version

The default OpenSSL distributed by many Linux vendors does not include
elliptic curve support.  If yours distribution does not support
elliptic curve in the OpenSSL libraries, you'll need to grab a fresh
copy and compile it by hand. You may want to install it in a
particular location, so use the Configure flag to do this:

 # ./Configure --prefix=/usr/local/openssl-ecdsa

Then make and make install

Note: Fedora 16 openssl RPMs with ecdsa support and an openssl source
tar ball are available at:

http://bgpsec.tislabs.com/openssl-ecdsa/



2.2 Building Bird

Configuring and Compiling

If you are using the patch, download BIRD bird-1.3.9.tar.gz from
http://bird.network.cz/

 # tar xvzpf bird-1.3.9.tar.gz 
 # cd bird-1.3.9/
 # patch -p1 < PATH-TO/BIRD-bgpsec-patch-v1.3.9.diff 

Or pull a fresh copy from our git repo.

Build it.
First rebuild configure (configure.in was changed by the patch):

 # autoconf 

Then Use configure flags that look something like the following. In
particular the paths for -I/usr/local/openssl-ecdsa/include and
-L/usr/local/openssl-ecdsa/lib are necessary to compile with a openssl
install with ecdsa support.  These arguments will change and may not
be necessary depending on if you needed to install ecdsa supporting
openssl and where you installed it:

 # ./configure '--enable-bgpsec' 'CFLAGS=-I/usr/local/openssl-ecdsa/include -g' 'LDFLAGS=-L/usr/local/openssl-ecdsa/lib/'

Then make and you should be good to go.


2.3 Testing

Some of the crypto parts of the code have a test suite you can run to verify it's working properly:

 # cd obj && make -C proto/bgp/bgpsec/ -f ../../../../proto/bgp/bgpsec/Makefile tests
 # cd obj && proto/bgp/bgpsec/tests
 
   Testing:
      ok:   65: cert sign: loaded the router key from tmp file: /tmp/bgpsec-keys/6DC9A40C5702405BAF311ED3185B02E67E18A9E7
      ok:   77: cert sign: algorithm 1, signature length (72) is not negative
      ok:   78: cert sign: algorithm 1, signature length (72) has at least a byte
      ok:   92: cert sign: verify signature result: 0 (should be 0)
      ok:  108: cert sign: verify signature fail result: 2 (should be 2)
      ok:  117: cert sign: loading key function returned: 0 (should be 0)
      ok:  127: cert sign: verify signature result: 0 (should be 0)
      ok:  136: cert sign: loading public key function returned: 0 (should be 0)
      ok:  146: cert sign: verify (pub) signature result: 0 (should be 0)
      ok:  159: ski sign:   algorithm 1, signature length (72) is not negative
      ok:  160: ski sign:   algorithm 1, signature length (72) has at least a byte
      ok:  171: ski sign:   verify signature result: 0 (should be 0)
    
 Results:
   Good: 12
    Bad: 0


2.4 Using It

You can create key pairs using the proto/bgp/bgpsec/gen-router-key
script.  For Example:

 # proto/bgp/bgpsec/gen-router-key -d /usr/share/bird/bgpsec-keys -p -c proto/bgp/bgpsec/router-key.cnf
 40C70252FE48D29401E9156ADBECF3EF42296AE4

The generated certificate, private key and the CSR are stored in the
directory structure under '/usr/share/bird/bgpsec-keys' using the SKI
value, '40C70252FE48D29401E9156ADBECF3EF42296AE4', as a part of the
directory names and file names of the keys (by default).

The public key can be copied to other machines and placed in the same
directories/filename without the private key. Likewise, keys from
other routers can be placed into the above directory with their SKI
identifying the directories/filenames in order for the validation
routines to look them up.

NOTE: in the future, this will be changed to use certificates or to
use the -rtr protocol instead to pull router keys.


2.5 Coding For It

The API for use in validating stuff can be found in
proto/bgp/bgpsec/validate.h. But most importantly, these two functions
will be of the most use:

 int bgpsec_sign_data_with_ski(...);
 int bgpsec_verify_signature_with_ski(...);

As they sign and verify data simply by passing the data along with a
SKI in ascii/hex form (in reality, it's just the filename from above
so as long as it can be stored in a file name it's usable).

The algorithm option should be set to
BGPSEC_ALGORITHM_SHA256_ECDSA_P_256 or BGPSEC_DEFAULT_CURVE.


3. BIRD run time configuration

The BGPSEC implementation currently has several additional
configuration options for the configuration file.  The following is an
example bgp section from a BIRD configuration file supporting BGPSEC:

  protocol bgp {
	 # AS4 is required for BGPSEC, this must be enabled
         enable as4;

	 # enable bgpsec for this connection
         bgpsec on;

	 # The local BIRD router subject key identifier (SKI) for this
         # connection.  'bgpsec_ski' identifies the (private) key that
         # the local BIRD router should use to sign BGPSEC packets on
         # this connection.
         bgpsec_ski "8CA56CF0A4D943ACCEB9CB67967561CA8A773B73" ;

	 # This is the default location for key storage. But it can
         # also be set here.
         bgpsec_key_repo_path "/usr/share/bird/bgpsec-keys/" ;

	 # Once processed, save used crypto keys in binary.  This
         # should speed up future cryptography with those keys.
         # Defaults to off.
         bgpsec_save_binary_keys 0;

	 # Do not allow the peer to set its pcount to 0.  Default is
         # true.  Set this value to false/0 if you want to allow your
         # peer to not have their AS included in the effective AS-PATH
         # lengths of routes (e.g. Route Servers).

         bgpsec_no_pcount0 1;

         BGPSEC_CONFED

         BGPSEC_CONFED_VALIDATE

         BGPSEC_NO_INVALID_ROUTES


	 # non-bgpsec info
         description "BGP Link";
         local as 64521;

         neighbor 172.16.1.2 as 64522;
         gateway direct;
         
         path metric 1;         # prefer shorter paths
         default bgp_med 0;     # when none is available

         password "demonet";
  }


4. License(s)

This BGPSEC patch created by Parsons, Inc.

(c) 2013-2013 Parsons, Inc.
All Rights Reserved

Code within this patch is dual copyrighted under both the GPLv2+ and
the BSD license.  It can be used under either license below:


GPLv2+

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
USA


BSD

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 
*  Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 
*  Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
 
*  Neither the name of Parsons, Inc nor the names of its contributors may
   be used to endorse or promote products derived from this software
   without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
